# docker compose syntay version used
version: "3.9"

# define services in this docker compose "environment"
services:

  # =====================================================================================

  # service "ipc2dsp"
  # provide interface to control system on RT system
  ipc2dsp:
    # Define Dockerfile acc. to which the ipc2dsp container shall be "built"
    build:
      context: ./ipc2dsp
      dockerfile: Dockerfile

    volumes:
      - ./ipc2dsp:/app

    # Define period for docker to wait for container to exit gracefully (from SIGTERM to SIGKILL)
    stop_grace_period: 2m

    # provide tty-like terminal for this container (like "interactive", when using "docker run")
    tty: true
    
    # bind ports
    # 5555: ZMQ pub-sub pattern
    # 6000: ZMQ REQ/REPL pattern (Values)
    # 7000: ZMQ REQ/REPL pattern (Direct CMDs)
    ports:
      - "5555:5555"
      - "6000:6000"
      - "7000:7000"
    
    # Command to fire up ipc2dsp
    command: python3 /app/ipc2dsp.py
  
  # =====================================================================================

  # service "interface_flask"
  # provide flask web page as an API
  interface_flask:
    # Define build settings for container
    build:
          context: ./interface_flask
          dockerfile: Dockerfile

    # Bind host port 8000 to container port 5000
    ports:
      - "8000:5000"

    # Mount volume directly into container
    volumes:
      - ./interface_flask:/app

    # Define period for docker to wait for container to exit gracefully (from SIGTERM to SIGKILL)
    stop_grace_period: 2m

    # Command to fire up ipc2dsp
    command: flask run

  # =====================================================================================

  # service "interface_fastapi"
  # provide FastAPI
  interface_fastapi:
    # Define build settings for container
    build:
          context: ./interface_fastapi
          dockerfile: Dockerfile

    # Bind host port 8100 to container port 5100
    ports:
      - "8100:5100"

    # Mount volume directly into container
    volumes:
      - ./interface_fastapi:/app

    # Define period for docker to wait for container to exit gracefully (from SIGTERM to SIGKILL)
    stop_grace_period: 2m

    # Command to fire up uvicorn with fastAPI app
    command: uvicorn app.app.main:app --reload --workers 1 --host 0.0.0.0 --port 5100

  # =====================================================================================

  # service "redis"
  # provide "In-Memory-Datenbank mit einer einfachen Schl√ºssel-Werte-Datenstruktur"
  redis:
    image: "redis:alpine"

    # Define period for docker to wait for container to exit gracefully (from SIGTERM to SIGKILL)
    stop_grace_period: 2m

  # =====================================================================================

  # service "interface_sub"
  # simple subscribed to publisher interfcae of ipc2dsp container
  interface_sub:
    # Define Dockerfile acc. to which the ipc2dsp container shall be "built"
    build:
      context: ./interface_sub
      dockerfile: Dockerfile

    volumes:
      - ./interface_sub:/app

    # Define period for docker to wait for container to exit gracefully (from SIGTERM to SIGKILL)
    stop_grace_period: 2m

    environment:
      # define environment variable to contain the name of the server this cotainer shall connect to
      # DO NOT USE SPACES !!!!! THEY WILL BE CONSIDERED PART OF THE KEY !!!
      - ZMQ_PUB_ADDRESS=tcp://ipc2dsp:5555

    # provide tty-like terminal for this container (like "interactive", when using "docker run")
    tty: true
    
    # bind port 
    # n/a, since no port of this interface_sub cotainer shall be available from outside the host machine

    # Command to fire up interface_sub
    command: python3 /app/interface_sub.py
